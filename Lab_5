/* 
 * Authors : Christopher Timm & Brett Young 
 * Created : 2/12/2019 1:35:47 PM
 * Title : Stop Watch using three buttons
 * 
 * SDR :
 *		Hardware
 *   		1 : 3x5 LED Matrix
 *			3 : NO Buttons
 *			3 : 47 Ohm resistors
 *		 3x5 LED Matrix
 *			PC pins : wiring cathodes of matrix
 *				PC0 wired to matrix pin 1
 *				PC1 wired to matrix pin 3 
 *				PC2 wired to matrix pin 10 
 *				PC3 wired to matrix pin 7 
 *				PC4 wired to matrix pin 8
 *			PF pins : wiring anodes of LED matrix  
 *			    PF0 to 47 Ohm resistor to matrix pin 12
 *			    F1 to 47 Ohm resistor to matrix pin 11
 *			    PF2 to 47 ohm resistor to matrix pin 2
 *		  NO Buttons
 *			PD pins
 *				PD1 to NO button to ground 
 *				PD3 to NO button to ground 
 *				PD3 to NO button to ground 
 */ 

#include <stdint.h>
#include <avr/io.h>

void config_io();
void one_ms();
void display_digits();
uint8_t go_btn_state(uint8_t);
uint8_t reset_btn_state(uint8_t);
uint8_t lap_btn_state(uint8_t);
uint8_t get_btn_press();
uint8_t mode_machine(uint8_t);

uint8_t display_value = 0;

enum {NULL_BTN, GO_BTN, LAB_BTN, RESET_BTN};
enum {BTN_LOW, BTN_RISING, BTN_HIGH, BTN_FALLING}; 	
enum {MODE_RESET, MODE_RUNNING, MODE_STOPPED, MODE_LAPPING};


int main(void){
  CLKPR = 0x80; CLKPR = 0x00; // sets the clock to 16 MHz.
  config_io();
  uint16_t ticks = 0;
   
    while (1){
		display_digits();
		one_ms();
		uint8_t m = mode_machine(get_btn_press());
		
			//RUNNING
		if(m == MODE_RUNNING){
			ticks++;
			if(ticks > 1000){ //one second has passed
				ticks -= 1000;
				display_value++;
			
				if(display_value > 9) {display_value = 0;}
			}
			// RESET
		}else if(m == MODE_RESET){
			ticks=0;
			display_value = 0;
			//LAPPING
		}else if(m == MODE_LAPPING){
			ticks++;
		}
	}
	return 0;
}

uint8_t get_btn_press(){
	uint8_t out = NULL_BTN;
	
	//GO checking for falling edge start/stop button
	if(go_btn_state(PIND &(1<<1)) == BTN_FALLING){
		return GO_BTN;
	} else{out = NULL_BTN;}
	
	//LAP checking for falling edge of lap button
	if(lap_btn_state(PIND &(1<<2)) == BTN_FALLING){
		return LAB_BTN;
	} else{out = NULL_BTN;}
	
	//RESET	checking for falling edge of reset button
	if(reset_btn_state(PIND &(1<<3)) == BTN_FALLING){
		return RESET_BTN;
	} else{out = NULL_BTN;}
			
	return out;	
}

uint8_t mode_machine(uint8_t user_cmd){
	static uint8_t state;
	uint8_t mmout;
	switch(state){
		case MODE_RESET:
			if		(user_cmd == GO_BTN)	{state = MODE_RUNNING;}
			else							{state = MODE_RESET;}
			break;
		case MODE_RUNNING:
			if	    (user_cmd == GO_BTN )   {state = MODE_STOPPED;}
			else if (user_cmd == LAB_BTN)	{state = MODE_LAPPING;}
			else if (user_cmd == RESET_BTN) {state = MODE_RESET;}
			break;
		case MODE_STOPPED: 
			if	    (user_cmd == GO_BTN)	{state = MODE_RUNNING;}
			else if (user_cmd == LAB_BTN)	{state = MODE_STOPPED;}
			else if (user_cmd == RESET_BTN)	{state = MODE_RESET;}  
			break;
		case MODE_LAPPING:
			if	    (user_cmd == GO_BTN)	{state = MODE_RUNNING;}
			else if (user_cmd == LAB_BTN)	{state = MODE_RUNNING;}
			else if (user_cmd == RESET_BTN)	{state = MODE_RESET;} 
			break;
	}
	return mmout = state;
}

uint8_t go_btn_state(uint8_t in){
	enum {LSTDY, LEDGY, HSTDY, HEDGY};
	static uint8_t state = HSTDY;
	uint8_t out = BTN_HIGH;
	switch (state){
		case LSTDY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = LEDGY; out = BTN_LOW;}
		break;
		case LEDGY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = HSTDY; out = BTN_RISING;}
		break;
		case HSTDY:
		if (in==0){state = HEDGY; out = BTN_HIGH;}
		else      {state = HSTDY; out = BTN_HIGH;}
		case HEDGY:
		if (in==0){state = LSTDY; out = BTN_FALLING;}
		else      {state = HSTDY; out = BTN_HIGH;}
	}
	return out;
		
}

uint8_t reset_btn_state(uint8_t in){
	enum {LSTDY, LEDGY, HSTDY, HEDGY};
	static uint8_t state = HSTDY ;
	uint8_t out = BTN_HIGH;
	switch (state){
		case LSTDY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = LEDGY; out = BTN_LOW;}
		break;
		case LEDGY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = HSTDY; out = BTN_RISING;}
		break;
		case HSTDY:
		if (in==0){state = HEDGY; out = BTN_HIGH;}
		else      {state = HSTDY; out = BTN_HIGH;}
		case HEDGY:
		if (in==0){state = LSTDY; out = BTN_FALLING;}
		else      {state = HSTDY; out = BTN_HIGH;}
	}
	return out;
}

uint8_t lap_btn_state(uint8_t in){
	enum {LSTDY, LEDGY, HSTDY, HEDGY};
	static uint8_t state = HSTDY;
	uint8_t out = BTN_HIGH;
	switch (state){
		case LSTDY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = LEDGY; out = BTN_LOW;}
		break;
		case LEDGY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = HSTDY; out = BTN_RISING;}
		break;
		case HSTDY:
		if (in==0){state = HEDGY; out = BTN_HIGH;}
		else      {state = HSTDY; out = BTN_HIGH;}
		case HEDGY:
		if (in==0){state = LSTDY; out= BTN_FALLING;}
		else      {state = HSTDY; out = BTN_HIGH;}
	}
	return out;
}

void config_io(){
	
	DDRF = 0xFF;  //LED screen 
	DDRC = 0xFF;  //LED screen
 										 // Start/Stop    Lap	   Reset	
	DDRD &= ~(1<<1) & ~(1<<2) & ~(1<<3); //    PD1,		  PD2,	    PD3 : Setting Buttons as input
	PORTD |= (1<<1) | (1<<2) | (1<<3);   //    PD1,		  PD2,	    PD3 : Setting pull up R for Buttons
}

void one_ms(){
	for (int16_t i = 0; i < 61; i ++);
}


void display_digits(){
	const uint8_t cathodes[5]= {1<<4, 1<<3, 1<<2, 1<<1, 1<<0};
		const int8_t allDigits [10][5] = 
			{
				{0x2,0x5,0x5,0x5,0x2}, // 0
				{0x2,0x3,0x2,0x2,0x7}, // 1
				{0x3,0x4,0x2,0x1,0x7}, // 2
				{0x7,0x4,0x6,0x4,0x7}, // 3
				{0x4,0x6,0x7,0x4,0x4}, // 4
				{0x7,0x1,0x7,0x4,0x7}, // 5
				{0x4,0x2,0x7,0x5,0x7}, // 6
				{0x7,0x0,0x2,0x0,0x1}, // 7
				{0x7,0x5,0x7,0x5,0x7}, // 8
				{0x7,0x7,0x4,0x4,0x74}, // 9
			};
		static int q = 0;
		PORTF = 0x00;          // before changing cathode, stop anodes
		PORTC = ~cathodes[q];  // cathodes: low is active
		PORTF = allDigits[display_value][q];     // anodes: high is active
		if(q==4){
			q=0;
		}else {
			q=q+1;
		}
}



/*
mode_machine(uint8_t user_cmd)
	It has input values GO_BTN/NULL_BTN. It has states 
	MODE_GO, MODE_RESET. It has outputs MODE_GO and MODE_RESET.
	Original Mode Machine for Simple Stop Watch 
 */
/*   
uint8_t mode_machine(uint8_t user_cmd){
	static uint8_t state = MODE_RESET;
	uint8_t mmout = MODE_GO;
	switch(state){
		case MODE_GO:
			if(user_cmd == NULL_BTN){state = MODE_GO; mmout = MODE_GO;}
			else                    {state = MODE_RESET; mmout = MODE_RESET;}
			break;
		case MODE_RESET:
			if(user_cmd == NULL_BTN ){state= MODE_GO; mmout = MODE_GO;}
			else					 {state = MODE_RESET; mmout = MODE_RESET;}
			break;
	}
	return mmout;
	
}*/
