/*
 * Lab_4.c
 *
 * Created: 2/5/2019 1:10:24 PM
 * Author : crtimm17
 
 Program Toggles an led based on the value of a SPST Switch 
 
 
 SWDR
	Connect a button to AVR/PB0 on one side and ground to another 
	Connect and LED anode to PCO and cathode to a resistor 

 */ 
#include <stdint.h>
#include <avr/io.h>
enum {btn_low, btn_rise, btn_high, btn_fall};

uint8_t state_machine(uint8_t);
void config_io();
void show_digits2(uint8_t);
uint8_t pulse_count = 0;


int16_t main(void){
	config_io();
	PORTF &=~ (1<<5);
	while (1) {
		show_digits2(pulse_count);
			uint8_t acquired = (PIND & (1<<0)); // if x is none zero is true. or write if (x!=0)
			uint16_t smoothed = state_machine(acquired);
			if(smoothed == btn_rise) {
				PORTF |=(1<<5);
				pulse_count++;
				}
				
				if (pulse_count > 9 ){
					pulse_count=0;
					}
			}
}

uint8_t state_machine(uint8_t in){
	enum {LSTDY, LEDGY, HSTDY, HEDGY};
		static uint8_t state = HSTDY; 
		 uint8_t out =  btn_high;
		 
		 switch (state){
			 case LSTDY:
					if (in==0){state = LSTDY; out = btn_low;}
					else {state = LEDGY; out = btn_low;}
				break;
			case LEDGY:
					if (in==0){state = LSTDY; out = btn_low;}
					else {state = HSTDY; out = btn_rise;}
				break;
			case HSTDY:
					if (in==0){state = HEDGY; out = btn_high;}
					else {state = HSTDY; out = btn_high;}
			    break;
			case HEDGY:
					if (in==0){state = LSTDY; out = btn_fall;}
					else {state = HSTDY; out = btn_high;}
				break;
		 }	
	 return out; 
}


void config_io(){
	
	DDRF =0xFF;
	DDRC= 0xFF;
	DDRD &= ~(1<<0); //PDO = BUTTON SET AS input
	PORTD |= (1<<0); //PD0 setting pull up R
	
	DDRF |= (1<<5);
	PORTF &= ~(1<<5);

}

void show_digits2(uint8_t j){
	const uint8_t cathodes[5]= {1<<4, 1<<3, 1<<2, 1<<1, 1<<0}; 
	for(uint8_t q= 0; q <= 4; q++){
		const int8_t allDigits [10][5] =
		{
			{0x2,0x5,0x5,0x5,0x2}, // 0
			{0x2,0x3,0x2,0x2,0x7}, // 1
			{0x3,0x4,0x2,0x1,0x7}, // 2
			{0x7,0x4,0x6,0x4,0x7}, // 3
			{0x4,0x6,0x7,0x4,0x4}, // 4
			{0x7,0x1,0x7,0x4,0x7}, // 5
			{0x4,0x2,0x7,0x5,0x7}, // 6
			{0x7,0x0,0x2,0x0,0x1}, // 7
			{0x7,0x5,0x7,0x5,0x7}, // 8
			{0x7,0x7,0x4,0x4,0x74}, // 9
		};
		
		PORTF = 0x00;          // before changing cath, stop anodes
		PORTC = ~cathodes[q];  // cathodes: low is active
		PORTF = allDigits[j][q];     // anodes: high is active
	
	}
}
/*
Lab_4_0

#include <stdint.h>
#include <avr/io.h>
#define	TWO_CATHODES ((1<<3) | (1<<2))
#define	TWO_ANODES ((1<<1) | (1<<2))


int main(void)
{
    DDRF =0x77;  //SIX PIN ACTICE ANODES 
	DDRC =0x1F; // FIVE PIN ACTIVE CATHODES 
	PORTF =TWO_ANODES; //ENERGIE ONLY ANODES FOR PF1 AND PF2
	PORTC = ~(TWO_CATHODES); //GROUND ONLY PC3'S CATHODE

    while (1) {;}
}

*/
/*Lab_4_2*/

/*
 * Lab_4.c
 *
 * Created: 2/5/2019 1:10:24 PM
 * Author : crtimm17
 
 Program Toggles an led based on the value of a SPST Switch 
 
 
 SWDR
	Connect a button to AVR/PB0 on one side and ground to another 
	Connect and LED anode to PCO and cathode to a resistor 

 */ 
/*
#include <stdint.h>
#include <avr/io.h>
enum {btn_low, btn_rise, btn_high, btn_fall};

uint8_t state_machine(uint8_t);
void config_io();
void show_digits2(uint8_t);
uint8_t pulse_count = 0;


int16_t main(void){
	config_io();
	while (1) {
		//for(volatile uint16_t spin = 0; spin < 1000; spin ++){}
			uint8_t acquired = (PIND & (1<<0)); // if x is none zero is true. or write if (x!=0)
			uint16_t smoothed = state_machine(acquired);
				if(smoothed == btn_rise) {
					PORTF |=(1<<5);
					
					//Setting PC0 to PC4
					uint8_t x= PINC;
					if((x & (1<<0)) == (1<<0)){
						PORTC |= (1<<4);
						}else {
						PORTC &=~(1<<4);
					}
					//Setting PF0 to PF2
					uint8_t y= PINF;
					if((y & (1<<0)) == (1<<0)){
						PORTF |= (1<<2);
						}else{
						PORTF &=~ (1<<2);
						}
				
						pulse_count++;
				}					
					if ( pulse_count %2 == 0){
						PORTC &= ~(1<<4);
						} else {
						PORTC |=(1<<4);
							}
		}
			
			
	
}

uint8_t state_machine(uint8_t in){
	enum {LSTDY, LEDGY, HSTDY, HEDGY};
		static uint8_t state = HSTDY; 
		 uint8_t out =  btn_high;
		 
		 switch (state){
			 case LSTDY:
					if (in==0){state = LSTDY; out = btn_low;}
					else {state = LEDGY; out = btn_low;}
				break;
			case LEDGY:
					if (in==0){state = LSTDY; out = btn_low;}
					else {state = HSTDY; out = btn_rise;}
				break;
			case HSTDY:
					if (in==0){state = HEDGY; out = btn_high;}
					else {state = HSTDY; out = btn_high;}
			    break;
			case HEDGY:
					if (in==0){state = LSTDY; out = btn_fall;}
					else {state = HSTDY; out = btn_high;}
				break;
		 }	
	 return out; 
}


void config_io(){
	DDRD &= ~(1<<0); //PDO = BUTTON SET AS input
	PORTD |= (1<<0); //PD0 setting pull up R
	
	DDRC &= ~(1<<0); //PC0 as input 
	DDRC |= (1<<4);  //PC4 as output
	 //PC0 = PC4
	
	DDRF &= ~ (1<<0); //PF0 as input
	DDRF |= (1<<2); //PF2 as output

	
}*/
