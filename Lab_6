/*
Authors : Christopher Timm & Brett Young
Created : 2/19/2019 1:31:41 PM
Title : Two Matrix Minute-Second Clock

SDR : 
Hardware 
   2 : 7x5 LED Matrix
   2 : NO Buttons
   12 : 47 Ohm resistors
   2 : 330 Ohm resistors
   2 : Discrete LED
7x5 LED Matrix (1)(Minutes)                          NO Buttons
     PC pins : wiring cathodes of matrix                PE pins
PC0 wired to matrix pin 1                           PE6 to NO button to ground
PC1 wired to matrix pin 3                           PE1 to NO button to ground
PC2 wired to matrix pin 10
PC3 wired to matrix pin 7
PC4 wired to matrix pin 8
     PF pins : wiring anodes of LED matrix
PF0 to 47 Ohm resistor to matrix pin 12
PF1 to 47 Ohm resistor to matrix pin 11
PF2 to 47 Ohm resistor to matrix pin 2
PF4 to 47 Ohm resistor to matrix pin 4
PF5 to 47 Ohm resistor to matrix pin 5
PF6 to 47 Ohm resistor to matrix pin 6
7x5 LED Matrix (2)(Seconds)                          
     PB pins : wiring cathodes of matrix            
PB0 wired to matrix pin 1                         
PB1 wired to matrix pin 3                        
PB2 wired to matrix pin 10
PB3 wired to matrix pin 7
PB4 wired to matrix pin 8
     PD pins : wiring anodes of LED matrix
PD0 to 47 Ohm resistor to matrix pin 12
PD1 to 47 Ohm resistor to matrix pin 11
PD2 to 47 Ohm resistor to matrix pin 2
PD4 to 47 Ohm resistor to matrix pin 4
PD5 to 47 Ohm resistor to matrix pin 5
PD6 to 47 Ohm resistor to matrix pin 6
Discrete LEDs
     PE pins
PE7 to LED to 330 Ohm resistor to ground
PE0 to LED to 330 Ohm resistor to ground


 
 
 The software must comply with five rules for critical systems:

1.//////////GOOD//////// The code must build and re-build with no warnings. 
 //////////GOOD////////2. All static and global variables must be initialized to valid values.
 //////////GOOD////////3. Check all function return values and all global variable values for reasonable values
	 before using them. If a global or a function-result is unreasonable, overwrite it to a
	 valid value (preferably a value different from its initial value).
 //////////GOOD////////4. Do not use empty loops to delay the code.
 //////////GOOD////////5. Do not nest if(){ if(){ more than two deep. Use && or switch-case to avoid deep nesting.
 
//////////GOOD//////// 6. Place a comment on your "intent" at the top of every file you write and every function
	except main (which "inherits" the comment at the top of the file). The config() function 
	should describe, for example, the SWDR it meets OR explicitly refer readers to a comment at the top.

 //////////GOOD////////7. Please avoid line-by-line comments; you may wish to comment each loop; you may wish to comment each 
    if-else if - else if - else at the first if, but that is optional.
 
 User Interfaces
//////////GOOD//////// 8. The user is presented with two buttons: an 8 mm red tactile switch that advances the hour by one
    for each button-press, and a gray or black tactile switch that advances the minutes displayed by one.
	The system uses four 3 x 5 pixel digits in your custom-designed font to show the time in minutes and
	seconds in an easily-read way.

 Hardware Interfaces
 9.The clock product drives the LED pixels at a refresh rate of 500 Hz or quicker. It scans the user buttons
   at a rate of 500 Hz or quicker.

 Software Interfaces
 //////////GOOD////////10.The clock does not emit or collect any data of any kind to other software components. The AVR/IO.H and 
    AVR-LIBC framework provides access to the capabilities of the AT90USB1286 and that is all
	
//////////GOOD//////// 11. the first two are tens and single minutes. The last two are tens and single seconds
     The minutes and the seconds are separated by a colon (which can be two discrete LEDs).
	  Req. 4.1.B. The digits shown are in a 3 x 5 pixel font and each digit is separated by
	  at least one blank (that is, always-off) column of pixels or 0.1 inches from all other digits.

 */ 

#include <avr/io.h>
#include <stdint.h>
#include <avr/interrupt.h>

//Functions
void config_io();
void display_digits_left();
void display_digits_right();
void reset_display();
void interrupt_func();
uint8_t get_btn_press();
uint8_t sec_btn_state(uint8_t);
uint8_t mins_btn_state(uint8_t);

//Global Variables
uint8_t display_tensm = 0;
uint8_t display_onesm = 0;
uint8_t display_secten = 0;
uint8_t display_seconds = 0;

enum {BTN_LOW, BTN_RISING, BTN_HIGH, BTN_FALLING};
enum {NULL_BTN, MINS_BTN, SEC_BTN};
enum {INC_SEC, INC_MINS};
	
int main(void)
{
   config_io();
    while (1) 
    {
		display_digits_left();
		display_digits_right();

   uint8_t x = get_btn_press();
		if(x == SEC_BTN){
			display_seconds++;  
			if(display_seconds > 9)  {display_seconds = 0; display_secten++;}
			if(display_secten > 5)   {display_secten = 0; display_onesm++;}
			if(display_onesm  > 9)   {display_onesm = 0; display_tensm++;} 			
		}
		if(x == MINS_BTN){
			display_onesm++;
			if(display_onesm > 9) {display_onesm = 0 ; display_tensm++;}
			if(display_tensm > 5) {reset_display();}
		}
    }
	return 0;
}

/*
 Interrupt service routine which interrupts every second
 i.e. when OCR1A = 31249; then calles interrupt_func() 
 which executes the display times logic 
 
 Function calls: interrupt_func()
*/
ISR(TIMER1_COMPA_vect){
	interrupt_func();
}

/*
  Funtion calls min_btn_state() and sec_btn_state() (which
  passes PB6 and PB1) to check for a falling edge on PB6 or
  PB1.If a falling edge is detected on PB6, MINS_BTN is 
  returned, because the user wants to increase the number 
  of minutes displayed. Like wise for the Seconds button on
  PB1, but it returns SEC_BTN. If there is no falling edge 
  detected NULL_BTN is returned
  
  Return Values: MINS_BTN, SEC_BTN, NULL_BTN
  Function calls: mins_btn_state(), sec_btn_state()
*/
uint8_t get_btn_press() {
		
		if(mins_btn_state(PINE & (1<<6)) == BTN_FALLING){
			return MINS_BTN;
		} 
		
		if(sec_btn_state(PINE & (1<<1)) == BTN_FALLING){
			return SEC_BTN;
		} else return NULL_BTN;
}

/*
	State Machine for Minutes button in PB6. De-bounces button
	using edge detector state machine and returns button state 
	
	Argument : PB6 (specifically)  / any button (in general)
	Return Values: BTN_LOW, BTN_RISING, BTN_HIGH, BTN_FALLING
*/
uint8_t mins_btn_state(uint8_t in){
	enum {LSTDY, LEDGY, HSTDY, HEDGY};
	static uint8_t state = HSTDY;
	uint8_t out = BTN_HIGH;
	switch (state){
		case LSTDY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = LEDGY; out = BTN_LOW;}
		break;
		case LEDGY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = HSTDY; out = BTN_RISING;}
		break;
		case HSTDY:
		if (in==0){state = HEDGY; out = BTN_HIGH;}
		else      {state = HSTDY; out = BTN_HIGH;}
		case HEDGY:
		if (in==0){state = LSTDY; out = BTN_FALLING;}
		else      {state = HSTDY; out = BTN_HIGH;}
	}
	return out;
	
}

/*
 State Machine for Seconds button in PB6. De-bounces button
 using edge detector state machine and returns button state

 Argument : PB6 (specifically)  / any button (in general)
 Return Values: BTN_LOW, BTN_RISING, BTN_HIGH, BTN_FALLING
*/
uint8_t sec_btn_state(uint8_t in)
{
	enum {LSTDY, LEDGY, HSTDY, HEDGY};
	static uint8_t state = HSTDY;
	uint8_t out = BTN_HIGH;
	switch (state){
		case LSTDY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = LEDGY; out = BTN_LOW;}
		break;
		case LEDGY:
		if (in==0){state = LSTDY; out = BTN_LOW;}
		else      {state = HSTDY; out = BTN_RISING;}
		break;
		case HSTDY:
		if (in==0){state = HEDGY; out = BTN_HIGH;}
		else      {state = HSTDY; out = BTN_HIGH;}
		case HEDGY:
		if (in==0){state = LSTDY; out = BTN_FALLING;}
		else      {state = HSTDY; out = BTN_HIGH;}
	}
	return out;
}

/*
 Function is using the const 2D array "allDigits" to
 display number to the left LED screen. It displays
 2 numbers on the left 5x7 LED matrix the digits are
 3x5 each with a space in the middle which are used
 to display the two digits used for the minutes.
*/
void display_digits_left(){
	const uint8_t cathodes[5]= {1<<4, 1<<3, 1<<2, 1<<1, 1<<0};
	const int8_t allDigits [11][5] =
	{						// Numbers
		{0x2,0x5,0x5,0x5,0x2}, // 0  
		{0x2,0x3,0x2,0x2,0x7}, // 1 
		{0x3,0x4,0x2,0x1,0x7}, // 2 
		{0x7,0x4,0x6,0x4,0x7}, // 3 
		{0x4,0x6,0x7,0x4,0x4}, // 4
		{0x7,0x1,0x7,0x4,0x7}, // 5
		{0x4,0x2,0x7,0x5,0x7}, // 6
		{0x7,0x0,0x2,0x0,0x1}, // 7
		{0x7,0x5,0x7,0x5,0x7}, // 8
		{0x7,0x7,0x4,0x4,0x4}, // 9 
		};
	static int q = 0;
	PORTF = 0x00;          
	PORTC = ~cathodes[q]; 
	PORTF = (allDigits[display_tensm][q]) | (allDigits[display_onesm][q] << 4);  // anodes: high is active
	if(q==4){
		q=0;
		}else {
		q=q+1;
	}
}

/*
 Function is using the const 2D array "allDigits" to
 display number to the right LED screen. It displays
 2 numbers on the left 5x7 LED matrix the digits are
 3x5 each with a space in the middle which are used
 to display the two digits of used for the seconds.
*/
void display_digits_right(){
	const uint8_t cathodes[5]= {1<<4, 1<<3, 1<<2, 1<<1, 1<<0};
	const int8_t allDigits [11][5] =
	{					    // Numbers
		{0x2,0x5,0x5,0x5,0x2}, // 0
		{0x2,0x3,0x2,0x2,0x7}, // 1 
		{0x3,0x4,0x2,0x1,0x7}, // 2 
		{0x7,0x4,0x6,0x4,0x7}, // 3
		{0x4,0x6,0x7,0x4,0x4}, // 4
		{0x7,0x1,0x7,0x4,0x7}, // 5
		{0x4,0x2,0x7,0x5,0x7}, // 6
		{0x7,0x0,0x2,0x0,0x1}, // 7
		{0x7,0x5,0x7,0x5,0x7}, // 8
		{0x7,0x7,0x4,0x4,0x4}, // 9
	};
	static int q = 0;
	PORTD = 0x00;         
	PORTB = ~cathodes[q]; 
	PORTD = (allDigits[display_secten][q]) | (allDigits[display_seconds][q] << 4)  ;  // anodes: high is active
	if(q==4){
		q=0;
		}else {
		q=q+1;
	}
}

/*
 Function configures the pins for the two LED 5x7
 matrix one on PF & PC pins and the other on PB 
 and PD pins 
 
 Along with TCCR1A, TCCCR1B, OCR1A to initialize 
 the interrupt th count ever 1 second. Sets timer
 interrupt/ gives permission for interrupt with 
 TIMSKI1 and OCIE1A, enables interrupt with sei();
  
 finally sets PE6 (for seconds button) & PE1 (for
 minutes button) as inputs with pull up resistors
 for the buttons. PE7 & PE0 are set at outputs and
 driven high as they are used for the discrete 
 colon LED's 
*/
void config_io(){
	DDRF = 0xFF;
	DDRC = 0xFF;  	
	DDRB = 0xFF;  
	DDRD = 0xFF;  
	
	TCCR1A = 0x00;
	TCCR1B = 0x0B;
	OCR1A = 31249; 
	TIMSK1 = (1<<OCIE1A); 
	sei();  
	
	DDRE |= (1<<7) | (1<<0);
	DDRE  &= ~(1<<6) & ~(1<<1) ;
	PORTE |= (1<<6)  |  (1<<1) | (1<<7) | (1<<0) ;

}

/*
 Resets display to 00:00 when the displayed time 
 reaches 59:59
*/
void reset_display(){
	display_tensm = 0; 
	display_onesm = 0; 
	display_secten = 0;
	display_seconds = 0;
}

/*
 Function runs during the interrupt service routine
 This function has the functional logic of the clock
 which makes sure time displayed says in based 60. 
*/
void interrupt_func(){
	display_seconds++;
	if(display_seconds > 9) {display_seconds = 0; display_secten++;}
	if(display_secten > 5)  {display_secten = 0; display_onesm++;}
	if(display_onesm > 9)   {display_onesm = 0; display_tensm++;}
	if(display_tensm > 5)   {reset_display();}
} 
